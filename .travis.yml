# tells Travis that this repository is an android application source code
language: android

#use Java 8 for compilation
jdk: oraclejdk8
sudo: required

#mail notifications on the email you provided whenever a build gets completed successfully
#or fails due to some error.
notifications:  #Optional
  email:
      - jackpott822@gmail.com

#Enabling caching of resources
#Travis can cache directories that you need to speed up the subsequent builds by caching the
#Gradle dependency folders.
#A peculiarity of dependency caching in Gradle means that to avoid uploading the cache after every build
before_cache:
    - rm -f  $HOME/.gradle/caches/modules-2/modules-2.lock
    - rm -fr $HOME/.gradle/caches/*/plugin-resolution/
cache:
  directories: #Cache all dirs under .gradle folder
    - $HOME/.gradle/daemon      #Cache daemon logs
    - $HOME/.gradle/wrapper/   #Cache the gradle
    - $HOME/.gradle/native     #Cache library downloaded from the gradle dependency
    - $HOME/.gradle/caches/
    - $HOME/.android/build-cache
env:
  #matrix:
    #defines the Android API version and the processor architecture, on which the code will be tested
    #These lines re-executes the script for each variable.
    #it will execute the whole script with the 21, and 25 APIs.
    #We can say it is really useful to test different API levels.
    # So, each commit you push to the repository will start two separate builds and test prepossess.
    #- ANDROID_TARGET=android-21 ANDROID_ABI=armeabi-v7a
    #- ANDROID_TARGET=android-24 ANDROID_ABI=armeabi-v7a
    #- ANDROID_TARGET=android-25 ANDROID_ABI=google_apis/armeabi-v7a

  global:  #Optional
   - ANDROID_API_LEVEL=25
   - ANDROID_BUILD_TOOLS_VERSION=25.0.2

   - EMULATOR_API_LEVEL=21

   #- ANDROID_ABI=google_apis/armeabi-v7a
   - ANDROID_ABI=armeabi-v7a
   #- ANDROID_TAG=google_apis

   - ADB_INSTALL_TIMEOUT=20 # minutes (2 minutes by default)

#Google requires you to accept their license agreement before
#you can get their libraries and tools.

#By default, Travis CI will accept all the requested licenses,
#but it is also possible to define a white list of licenses to be accepted

licenses:
  - 'android-sdk-preview-license-.+'
  - 'android-sdk-license-.+'
  - 'google-gdk-license-.+'

# Setting up the build related configurations.
android:
  components:
    #Installing a newer SDK Platform Tools revision
    #Note that the tools section appears twice on purpose as it’s required to get the newest
    #Android SDK tools.
    - tools
    - platform-tools
    - tools

    # The BuildTools version used by your project
    - build-tools-ANDROID_BUILD_TOOLS_VERSION

    # The SDK version used to compile your project
    - android-ANDROID_API_LEVEL
    #- android-21
    #- android-23
    #- android-24

    # Additional components
    - extra-google-google_play_services # Google Play Services
    - extra-google-m2repository  # support library
    - extra-android-m2repository # for design library
    - extra-android-support # Support library

    #To get a list of available exact component names and descriptions run the command
    #android list sdk --no-ui --all --extended (preferably in your local development machine).
    - addon-google_apis-google-$ANDROID_API_LEVEL
    - addon-google_apis-google-$EMULATOR_API_LEVEL

    #specify  at least one system image, if you need to run emulator(s) during your tests
    #specify emulator system images on which application testing will be performed.
    #If you are going to use more than one API levels remember to define all the emulators needed
    - sys-img-armeabi-v7a-addon-google_apis-google-$ANDROID_API_LEVEL
    - sys-img-armeabi-v7a-addon-google_apis-google-$EMULATOR_API_LEVEL
    #- sys-img-armeabi-v7a-android-21
    #- sys-img-armeabi-v7a-android-22
    #- sys-img-armeabi-v7a-android-25
    #- sys-img-armeabi-v7a-android-24

#Writing build script
before_script:
  - chmod +x gradlew      #Grant permissions

  #list out supported android targets by running
  #list of the supported android targets for given build environments in Travis log window
  - android list targets

  # Emulator Management: Create, Start and Wait
   # Create AVD for given api
  #- echo no | android create avd --force -n test -t ${EMULATOR_API_LEVEL} --abi ${ANDROID_ABI}
  - echo no | android create avd --force -n test -t android-21 --abi armeabi-v7a
  #- echo no | android create avd --force -n test -t android-21 --abi armeabi-v7a --skin 480x800
  #Start emulator
  - emulator -avd test -no-skin -no-audio -no-window &

  #This will print “Waiting for emulator” in Travis log until emulator starts.
  - android-wait-for-emulator #Run wait for the emulator script.

  #Display list of devices
  #- adb devices

  #sending the key “menu” to the emulator to unlock it.
  - adb shell input keyevent 82 &

script:
    #- ./gradlew clean
    #- ./gradlew assembleDebug
    #- ./gradlew assembleDebugAndroidTest

    #connectedCheck executes instrumentation tests located in src/androidTests/
    - ./gradlew connectedAndroidTest -PdisablePreDex --stacktrace
    #-    ./gradlew clean build
    #- ./gradlew :projectcore:checkstyle
    #  - ./gradlew clean build -x lint
    #  - ./gradlew :project:connectedAndroidTest
    #- ./gradlew connectedCheck coveralls -PdisablePreDex --stacktrace



before_install:
    - mkdir "$ANDROID_HOME/licenses" || true
    - echo -e "\n8933bad161af4178b1185d1a37fbf41ea5269c55" > "$ANDROID_HOME/licenses/android-sdk-license"
    - echo -e "\n84831b9409646a918e30573bab4c9c91346d8abd" > "$ANDROID_HOME/licenses/android-sdk-preview-license"
    - chmod +x gradlew
    # run the code coverage after every successful build
    - pip install --user codecov    #Install codecov

after_success:
    - codecov                       #Run codecov

after_failure: "cat $TRAVIS_BUILD_DIR/app/build/outputs/lint-results-debug.xml"