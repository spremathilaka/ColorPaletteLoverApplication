language: android
jdk: oraclejdk8
sudo: required

notifications:  #Optional
  email:
      - jackpott822@gmail.com

before_cache:
    - rm -f  $HOME/.gradle/caches/modules-2/modules-2.lock
    - rm -fr $HOME/.gradle/caches/*/plugin-resolution/
cache:
  directories: #Cache all dirs under .gradle folder
    - $HOME/.gradle/daemon      #Cache daemon logs
    - $HOME/.gradle/wrapper/   #Cache the gradle
    - $HOME/.gradle/native     #Cache library downloaded from the gradle dependency
    - $HOME/.gradle/caches/
    - $HOME/.android/build-cache

env:
#really useful to test different API levels. So, each commit you push to the repository will start
#two separate builds and test prepossess.
 #matrix:
 #   - ANDROID_TARGET=android-25 ANDROID_ABI=armeabi-v7a
 #   - ANDROID_TARGET=android-21 ANDROID_ABI=armeabi-v7a
 global:
    - ANDROID_API_LEVEL=25
    - EMULATOR_API_LEVEL=21
    - ANDROID_BUILD_TOOLS_VERSION=25.0.2
    - ADB_INSTALL_TIMEOUT=10    #Time out to 10 mins/2 minutes by default
    #- ANDROID_ABI=google_apis/armeabi-v7a
    - ANDROID_ABI=armeabi-v7a
    - ANDROID_TAG=google_apis
android:
    components:
        - tools # to get the new `repository-11.xml`
        - tools # to install Android SDK tools 25.1.x (x = 6 right now)
        - platform-tools

         # The BuildTools version used by your project
        - build-tools-ANDROID_BUILD_TOOLS_VERSION

         # The SDK version used to compile your project
        - android-ANDROID_API_LEVEL

        # Additional components
        - extra-google-google_play_services
        - extra-google-m2repository  # support library
        - extra-android-m2repository # for design library
        - extra-android-support # Support library

        - addon-google_apis-google-$ANDROID_API_LEVEL
        - addon-google_apis-google-$EMULATOR_API_LEVEL

        #specify emulator system images on which application testing will be performed.
        #If you are going to use more than one API levels remember to define all the emulators needed
        #- sys-img-armeabi-v7a-android-$ANDROID_API_LEVEL_LEVEL
        #- sys-img-armeabi-v7a-android-$EMULATOR_API_LEVEL
        - sys-img-armeabi-v7a-addon-google_apis-google-$ANDROID_API_LEVEL
        - sys-img-armeabi-v7a-addon-google_apis-google-$EMULATOR_API_LEVEL

#Google requires you to accept their license agreement before
#you can get their libraries and tools.
licenses:
  - 'android-sdk-preview-license-.+'
  - 'android-sdk-license-.+'
  - 'google-gdk-license-.+'

before_script:
# Prepare pre-accepted licenses to not be promted at installation
 # - mkdir -p "$ANDROID_HOME/licenses"
 #- cp ./google-licenses/* "$ANDROID_HOME/licenses/"

  - chmod +x gradlew #Grant permissions
  - android list targets
  - echo no | android create avd --force -n test -t $ANDROID_TARGET --abi $ANDROID_ABI  #Create AVD for given api
  - emulator -avd test -no-skin -no-audio -no-window & #Start emulator
  - android-wait-for-emulator             #Run wait for the emulator script.
  - adb devices                           #Display list of devices
  - adb shell input keyevent 82 &
script:
  #- echo "Travis branch is $TRAVIS_BRANCH"    #Print out which branch it is.
  #- echo "Travis branch is in pull request $TRAVIS_PULL+REQUEST"    #Print out pull request number.
  #connectedCheck executes instrumentation tests located in src/androidTests/
  #- ./gradlew connectedAndroidTest -PdisablePreDex --stacktrace
  #- ./gradlew connectedAndroidTest -PdisablePreDex --stacktrace
  - ./gradlew clean build
#  - ./gradlew clean
#  - ./gradlew assembleDebug
#- ./gradlew assembleDebugAndroidTest
#- ./gradlew :projectcore:checkstyle
#  - ./gradlew clean build -x lint
#  - ./gradlew :project:connectedAndroidTest
before_install:
  - chmod +x gradlew
  - pip install --user codecov    #Install codecov
  - ./gradlew dependencies || true

after_success:
  - codecov                       #Run codecov

after_failure: "cat $TRAVIS_BUILD_DIR/app/build/outputs/lint-results-debug.xml"